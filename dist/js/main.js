class ChartComponent extends HTMLElement{constructor(){super()}connectedCallback(){const e=this.getAttribute("chartName"),t=this.getAttribute("color"),n=this.getAttribute("image"),o=this.getAttribute("value"),i=document.createElement("template");i.innerHTML=`\n            <div class="hability ${e}">\n                <div class="circle">\n                    <div class="logo">\n                        <img src="${n}">\n                    </div>\n                </div>\n                <canvas id="${e}" width="70" height="70"></canvas>\n            </div>\n        `,this.appendChild(i.content.cloneNode(!0)),this.buildChart(e,t,o)}buildChart(e,t,n){const o=document.getElementById(e).getContext("2d"),i=(new Chart(o,{type:"pie",data:{datasets:[{data:[n,100-n],backgroundColor:[t,"#ff000000"]}]},options:{responsive:!1,tooltips:{enabled:!1},elements:{arc:{borderWidth:0}}}}),document.querySelector("."+e));i.addEventListener("click",()=>{Math.floor(1e3*Math.random())}),i.addEventListener("mouseenter",()=>{document.querySelector("body").classList.add("animated-color"),document.querySelector("body").classList.add("theme-"+e)}),i.addEventListener("mouseleave",()=>{document.querySelector("body").classList.remove("animated-color"),document.querySelector("body").classList.remove("theme-"+e)})}}customElements.define("app-chart",ChartComponent);const app=function(){const e=[{route:"home",title:"Home - Vitor Takara",templateUrl:"views/home/home.html",script:"views/home/home.js",init:()=>initHome(),templateCache:null},{route:"work",title:"work",templateUrl:"views/work/work.html",script:"views/work/work.js",init:()=>initWork(),templateCache:null},{route:"aboutme",title:"about me",templateUrl:"views/aboutme/aboutme.html",script:"views/aboutme/aboutme.js",init:()=>initAboutMe(),templateCache:null}];async function t(e){const t=document.querySelector("#app");null===e.templateCache?(await function(e){const t=document.querySelector("#app");return new Promise(o=>{fetch(e.templateUrl).then(e=>e.text()).then(i=>{n(e.title),e.templateCache=i,window.location.hash=e.route,t.innerHTML=i,o(!0)})})}(e),await function(e){const t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=e.script;const n=document.getElementsByTagName("script")[0];return n.parentNode.insertBefore(t,n),new Promise(e=>{t.addEventListener("load",()=>{e(!0)})})}(e),e.init()):(t.innerHTML=e.templateCache,n(e.title),window.location.hash=e.route,e.init())}function n(e){console.log(e),document.title=e}return document.addEventListener("DOMContentLoaded",(function(){!function(){const n=e.filter(e=>"#"+e.route===window.location.hash);0===n.length?t(e[0]):t(n[0])}()})),{views:e,setView:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
