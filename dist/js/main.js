class ChartComponent extends HTMLElement{constructor(){super()}connectedCallback(){const e=this.getAttribute("chartName"),t=this.getAttribute("color"),n=this.getAttribute("image"),a=this.getAttribute("value"),o=document.createElement("template");o.innerHTML=`\n            <div class="hability ${e}">\n                <div class="circle">\n                    <div class="logo">\n                        <img src="${n}">\n                    </div>\n                </div>\n                <canvas id="${e}" width="70" height="70"></canvas>\n            </div>\n        `,this.appendChild(o.content.cloneNode(!0)),this.buildChart(e,t,a)}buildChart(e,t,n){const a=document.getElementById(e).getContext("2d"),o=(new Chart(a,{type:"pie",data:{datasets:[{data:[n,100-n],backgroundColor:[t,"#ff000000"]}]},options:{responsive:!1,tooltips:{enabled:!1},elements:{arc:{borderWidth:0}}}}),document.querySelector("."+e)),i=document.querySelector("body");let s=0;o.addEventListener("click",()=>{const e=["Thank you for visiting my website!","Can't wait for be part of your team! :)","This SPA website was made 100% by me without any frameworks! Isn't awesome?!",`Since you entered in my website, ${Math.floor(1e3*Math.random())} javascripts frameworks were made!`,"Ok, I think you already saw that nothing will happen clicking here...","One last time: nothing will gonna happen...","Congratiulations! You completed the quest! :D","Sorry, I lied... There still nothing. I'll repeat all previous messages.","Bye and thanks for beeing here playing (?) with my portfolio! Have a great day! :)"];alert(e[s]),s>=e.length?s=0:s++}),o.addEventListener("mouseenter",()=>{i.classList.add("animated-color"),i.classList.add("theme-"+e)}),o.addEventListener("mouseleave",()=>{i.classList.remove("animated-color"),i.classList.remove("theme-"+e)})}}customElements.define("app-chart",ChartComponent);class HeaderComponent extends HTMLElement{constructor(){super()}connectedCallback(){const e=this.getAttribute("menuActived")||null,t=this.getAttribute("menu")||"hide",n=document.createElement("template"),a=`\n            <div class="buttons-wrapper">\n                <a class="text ${"work"===e?"--active":""}" onclick="setView(1)">Work</a>\n                <a class="text ${"aboutme"===e?"--active":""}" onclick="setView(2)">About me</a>\n            </div>\n        `;n.innerHTML=`\n        <header class="header ${"aboutme"===e?"--aboutme":""}"">\n            <div class="logo">\n                <img class="image" src="assets/img/logo.png">\n            </div>\n\n            ${"show"===t?a:""}\n        </header>\n        `,this.appendChild(n.content.cloneNode(!0))}}customElements.define("app-header",HeaderComponent);const app=function(){const e=[{route:"home",title:"Home - Vitor Takara",templateUrl:"views/home/home.html",script:"views/home/home.js",init:()=>initHome(),templateCache:null},{route:"work",title:"work",templateUrl:"views/work/work.html",script:"views/work/work.js",init:()=>initWork(),templateCache:null},{route:"aboutme",title:"about me",templateUrl:"views/aboutme/aboutme.html",script:"views/aboutme/aboutme.js",init:()=>initAboutMe(),templateCache:null}];async function t(e){const t=document.querySelector("#app");null===e.templateCache?(await function(e){const t=document.querySelector("#app");return new Promise(a=>{fetch(e.templateUrl).then(e=>e.text()).then(o=>{n(e.title),e.templateCache=o,window.location.hash=e.route,t.innerHTML=o,a(!0)})})}(e),await function(e){const t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=e.script;const n=document.getElementsByTagName("script")[0];return n.parentNode.insertBefore(t,n),new Promise(e=>{t.addEventListener("load",()=>{e(!0)})})}(e),e.init()):(t.innerHTML=e.templateCache,n(e.title),window.location.hash=e.route,e.init())}function n(e){document.title=e}return document.addEventListener("DOMContentLoaded",(function(){!function(){const n=e.filter(e=>"#"+e.route===window.location.hash);0===n.length?t(e[0]):t(n[0])}()})),{views:e,setView:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
