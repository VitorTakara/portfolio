const app=function(){const t=[{route:"home",title:"Home - Vitor Takara",templateUrl:"views/home/home.html",script:"views/home/home.js",init:()=>initHome(),templateCache:null},{route:"work",title:"work",templateUrl:"views/work/work.html",script:"views/work/work.js",init:()=>initWork(),templateCache:null},{route:"aboutme",title:"about me",templateUrl:"views/aboutme/aboutme.html",script:"views/aboutme/aboutme.js",init:()=>initAboutMe(),templateCache:null}];async function e(t){const e=document.querySelector("#app");null===t.templateCache?(await function(t){const e=document.querySelector("#app");return new Promise(o=>{fetch(t.templateUrl).then(t=>t.text()).then(i=>{n(t.title),t.templateCache=i,window.location.hash=t.route,e.innerHTML=i,o(!0)})})}(t),await function(t){const e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=t.script;const n=document.getElementsByTagName("script")[0];return n.parentNode.insertBefore(e,n),new Promise(t=>{e.addEventListener("load",()=>{t(!0)})})}(t),t.init()):(e.innerHTML=t.templateCache,n(t.title),window.location.hash=t.route,t.init())}function n(t){console.log(t),document.title=t}return document.addEventListener("DOMContentLoaded",(function(){!function(){const n=t.filter(t=>"#"+t.route===window.location.hash);0===n.length?e(t[0]):e(n[0])}()})),{views:t,setView:e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInZpZXdzIiwicm91dGUiLCJ0aXRsZSIsInRlbXBsYXRlVXJsIiwic2NyaXB0IiwiaW5pdCIsImluaXRIb21lIiwidGVtcGxhdGVDYWNoZSIsImluaXRXb3JrIiwiaW5pdEFib3V0TWUiLCJhc3luYyIsInNldFZpZXciLCJ2aWV3IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJodG1sIiwic2V0VGl0bGUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJpbm5lckhUTUwiLCJsb2FkSHRtbCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwic3JjIiwiZWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJhZGRFdmVudExpc3RlbmVyIiwibG9hZFNjcmlwdCIsImNvbnNvbGUiLCJsb2ciLCJhY3RpdmVSb3V0ZXMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJzZXRGaXJzdFZpZXciXSwibWFwcGluZ3MiOiJBQUFBLE1BQUFBLElBQUEsV0FDQSxNQUFBQyxFQUFBLENBQ0EsQ0FDQUMsTUFBQSxPQUNBQyxNQUFBLHNCQUNBQyxZQUFBLHVCQUNBQyxPQUFBLHFCQUNBQyxLQUFBLElBQUFDLFdBQ0FDLGNBQUEsTUFFQSxDQUNBTixNQUFBLE9BQ0FDLE1BQUEsT0FDQUMsWUFBQSx1QkFDQUMsT0FBQSxxQkFDQUMsS0FBQSxJQUFBRyxXQUNBRCxjQUFBLE1BQ0EsQ0FDQU4sTUFBQSxVQUNBQyxNQUFBLFdBQ0FDLFlBQUEsNkJBQ0FDLE9BQUEsMkJBQ0FDLEtBQUEsSUFBQUksY0FDQUYsY0FBQSxPQW9DQUcsZUFBQUMsRUFBQUMsR0FDQSxNQUFBYixFQUFBYyxTQUFBQyxjQUFBLFFBRUEsT0FBQUYsRUFBQUwscUJBbkNBLFNBQUFLLEdBQ0EsTUFBQWIsRUFBQWMsU0FBQUMsY0FBQSxRQUVBLE9BQUEsSUFBQUMsUUFBQUMsSUFDQUMsTUFBQUwsRUFBQVQsYUFDQWUsS0FBQUMsR0FBQUEsRUFBQUMsUUFDQUYsS0FBQUcsSUFDQUMsRUFBQVYsRUFBQVYsT0FDQVUsRUFBQUwsY0FBQWMsRUFDQUUsT0FBQUMsU0FBQUMsS0FBQWIsRUFBQVgsTUFDQUYsRUFBQTJCLFVBQUFMLEVBQ0FMLEdBQUEsT0F5QkFXLENBQUFmLFNBcEJBLFNBQUFBLEdBQ0EsTUFBQVIsRUFBQVMsU0FBQWUsY0FBQSxVQUNBeEIsRUFBQXlCLEtBQUEsa0JBQ0F6QixFQUFBTSxPQUFBLEVBQ0FOLEVBQUEwQixJQUFBbEIsRUFBQVIsT0FFQSxNQUFBMkIsRUFBQWxCLFNBQUFtQixxQkFBQSxVQUFBLEdBR0EsT0FGQUQsRUFBQUUsV0FBQUMsYUFBQTlCLEVBQUEyQixHQUVBLElBQUFoQixRQUFBQyxJQUNBWixFQUFBK0IsaUJBQUEsT0FBQSxLQUNBbkIsR0FBQSxPQVVBb0IsQ0FBQXhCLEdBQ0FBLEVBQUFQLFNBRUFOLEVBQUEyQixVQUFBZCxFQUFBTCxjQUNBZSxFQUFBVixFQUFBVixPQUNBcUIsT0FBQUMsU0FBQUMsS0FBQWIsRUFBQVgsTUFDQVcsRUFBQVAsUUFJQSxTQUFBaUIsRUFBQXBCLEdBQ0FtQyxRQUFBQyxJQUFBcEMsR0FDQVcsU0FBQVgsTUFBQUEsRUFpQkEsT0FKQVcsU0FBQXNCLGlCQUFBLG9CQUFBLFlBVkEsV0FDQSxNQUFBSSxFQUFBdkMsRUFBQXdDLE9BQUE1QixHQUFBLElBQUFBLEVBQUFYLFFBQUFzQixPQUFBQyxTQUFBQyxNQUNBLElBQUFjLEVBQUFFLE9BQ0E5QixFQUFBWCxFQUFBLElBRUFXLEVBQUE0QixFQUFBLElBTUFHLE1BR0EsQ0FDQTFDLE1BQUFBLEVBQ0FXLFFBQUFBLEdBL0ZBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcHAgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3Qgdmlld3MgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByb3V0ZTogJ2hvbWUnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0hvbWUgLSBWaXRvciBUYWthcmEnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2hvbWUvaG9tZS5odG1sJyxcclxuICAgICAgICAgICAgc2NyaXB0OiAndmlld3MvaG9tZS9ob21lLmpzJyxcclxuICAgICAgICAgICAgaW5pdDogKCkgPT4gaW5pdEhvbWUoKSxcclxuICAgICAgICAgICAgdGVtcGxhdGVDYWNoZTogbnVsbCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcm91dGU6ICd3b3JrJyxcclxuICAgICAgICAgICAgdGl0bGU6ICd3b3JrJyxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy93b3JrL3dvcmsuaHRtbCcsXHJcbiAgICAgICAgICAgIHNjcmlwdDogJ3ZpZXdzL3dvcmsvd29yay5qcycsXHJcbiAgICAgICAgICAgIGluaXQ6ICgpID0+IGluaXRXb3JrKCksXHJcbiAgICAgICAgICAgIHRlbXBsYXRlQ2FjaGU6IG51bGwsXHJcbiAgICAgICAgfSx7XHJcbiAgICAgICAgICAgIHJvdXRlOiAnYWJvdXRtZScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnYWJvdXQgbWUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2Fib3V0bWUvYWJvdXRtZS5odG1sJyxcclxuICAgICAgICAgICAgc2NyaXB0OiAndmlld3MvYWJvdXRtZS9hYm91dG1lLmpzJyxcclxuICAgICAgICAgICAgaW5pdDogKCkgPT4gaW5pdEFib3V0TWUoKSxcclxuICAgICAgICAgICAgdGVtcGxhdGVDYWNoZTogbnVsbCxcclxuICAgICAgICB9XHJcbiAgICBdXHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZEh0bWwodmlldykge1xyXG4gICAgICAgIGNvbnN0IGFwcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcHAnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBmZXRjaCh2aWV3LnRlbXBsYXRlVXJsKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS50ZXh0KCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoaHRtbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpdGxlKHZpZXcudGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcudGVtcGxhdGVDYWNoZSA9IGh0bWw7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSB2aWV3LnJvdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZFNjcmlwdCh2aWV3KSB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcclxuICAgICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXHJcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZVxyXG4gICAgICAgIHNjcmlwdC5zcmMgPSB2aWV3LnNjcmlwdDtcclxuXHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XHJcbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBlbClcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiBzZXRWaWV3KHZpZXcpIHtcclxuICAgICAgICBjb25zdCBhcHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJyk7XHJcblxyXG4gICAgICAgIGlmICh2aWV3LnRlbXBsYXRlQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgbG9hZEh0bWwodmlldyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxvYWRTY3JpcHQodmlldyk7XHJcbiAgICAgICAgICAgIHZpZXcuaW5pdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC5pbm5lckhUTUwgPSB2aWV3LnRlbXBsYXRlQ2FjaGU7XHJcbiAgICAgICAgICAgIHNldFRpdGxlKHZpZXcudGl0bGUpO1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHZpZXcucm91dGU7XHJcbiAgICAgICAgICAgIHZpZXcuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRUaXRsZSh0aXRsZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRpdGxlKVxyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0Rmlyc3RWaWV3KCkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZVJvdXRlcyA9IHZpZXdzLmZpbHRlcih2aWV3ID0+IGAjJHt2aWV3LnJvdXRlfWAgPT09IHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcclxuICAgICAgICBpZiAoYWN0aXZlUm91dGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBzZXRWaWV3KHZpZXdzWzBdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRWaWV3KGFjdGl2ZVJvdXRlc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoZW4gZG9jdW1lbnQgaXMgUmVhZHlcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZXRGaXJzdFZpZXcoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmlld3M6IHZpZXdzLFxyXG4gICAgICAgIHNldFZpZXc6IHNldFZpZXdcclxuICAgIH1cclxuXHJcbn0oKSk7Il19
